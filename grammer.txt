Grammar for RUST
=================

e = empty string
\ is used wherever the symbols [] () or | is used as a part of EBNF.

Basic
------

<Program> -> <FunctionDefinitions>

<FunctionDefinitions> -> <FunctionDefinition> <FunctionDefinitions>
                        | e
<Statements> -> <Statement>;<Statements> | <IfExpression><Statements> | <CycleExpression><Statements> | <COMMENT><Statements>
              | e
<Statement> ->  <DeclarationStatement>
              | <ExpressionStatement>
              | <AssignmentExpression>
              | <TypeExpression>
			  | <Println>
<DeclarationStatement> ->let <VariableDefinition>
                        |let <VariableDefinition> : <DataType>
                        | let <VariableDefinition> = <DeclarationRightStatement>				                              
                        | let <VariableDefinition> : <DataType> = <DeclarationRightStatement>
<DeclarationRightStatement> -> 	<LiteralExpression> | <BlockExpression> | <BinaryExpression> 
                               | <GroupedExpression> | <FunctionCall>

<VariableDefinition> -> <Variable>
                      | mut <Variable>
<ExpressionStatement> -> <LiteralExpression>
                       | <BlockExpression>
                       | <BinaryExpression>
                       | <GroupedExpression>
                       | <FunctionCall>
                       | <ContinueExpression>
                       | <BreakExpression>
                       | <ReturnExpression>

<TypeExpression> -> type <Identifier> = <Identifier>
<BlockExpression> -> { <Statements> }
<ReturnExpression> -> return <ExpressionStatement>
<GroupedExpression> -> ( <ExpressionStatement> )
<ContinueExpression> -> continue
<BreakExpression> -> break

<LiteralExpression> -> <CHAR_STR_LITERAL>
                     | <INTEGER_LITERAL>
                     | <FLOAT_LITERAL>
                     | <BOOLEAN_LITERAL>
<DataType> -> i16
            | u16
            | f32
            | bool
            | char


<Variable> -> <Identifier>
//引号中任意字符
<Println> -> println! ( " [.]* " , <CallParameterList> )


Literals and Variables
---------------------

<CHAR_STR_LITERAL> -> ' [A-Za-z0-9] ' | e
<INTEGER_LITERAL> -> [0-9] <INTEGER_LITERAL> | e
<FLOAT_LITERAL> -> <INTEGER_LITERAL>.<INTEGER_LITERAL>
<BOOLEAN_LITERAL> -> false
                   | true
<Identifier> -> <IdentifierHead><IdentifierContent> | e
<IdentifierHead> -> [A-Za-z_]
<IdentifierContent> -> <IdentifierHead><IdentifierContent> | [0-9]<IdentifierContent> | e 

Cycle Statement
--------------

<CycleExpression> -> <WhileExpression> | <ForExpression> | <LoopExpression>
<WhileExpression> -> while <ExpressionStatement> <BlockExpression>
<ForExpression> -> for <Identifier> in <BinaryExpression> .. <BinaryExpression> <BlockExpression>
<LoopExpression> -> loop <BlockExpression>

Conditional Statement
----------------------

<IfExpression> -> if <ConditionStatement>  <BlockExpression>
                | if <ConditionStatement>  <BlockExpression> else <BlockExpression>
                | if <ConditionStatement>  <BlockExpression> else <IfExpression> 

<ConditionStatement> -> <BlockExpression> | <BinaryExpression> | <GroupedExpression>
                        | <FunctionCall>  | <IfExpression>
Function Statement
-------------------

<FunctionDefinition> -> fn <FunctionIdentifier> (<ParameterList>) <BlockExpression>
                |  fn <FunctionIdentifier> (<ParameterList>) -> <DataType> <BlockExpression>

<ParameterList> -><Variable>: <DataType>,<ParameterList>
                  | e
<FunctionCall> -> <FunctionIdentifier> (<CallParameterList>)

<CallParameterList> -> <Variable>,<ParameterList>
                       | <LiteralExpression>,<ParameterList>
                       | e

<FunctionIdentifier> -> <Identifier>


Operator Assignments
---------------------
The given operator precedence follows: (High -> Low)
()
!
* / %
+ -
<< >>
< <= >= >
== !=
&
^
|
&&
||
*=
= /= %= += -= <<= >>= &= ^= |=



<AssignmentExpression> -> <BinaryExpression>
                         | <Variable> <AssignmentOperator> <BinaryExpression>

<AssignmentOperator> -> =
                       | *=
                       | /=
                       | %=
                       | +=
                       | -=
                       | <<=
                       | >>=
                       | &=
                       | ^=
                       | |=

<BinaryExpression> -> <LHS> <OP> <RHS> | <LHS>
<LHS> -> <PrimaryExpression>

<OP> ->    !
          | * / %
          | + -
          | << >>
          | < <= >= >
          | == !=
          | &
          | ^
          | |
          | &&
          | ||

<PrimaryExpression> -> <Variable>                                                    
                       | <LiteralExpression>                                         
                       | ( <BinaryExpression> )

//消除左递归弃用					   
/*************************************************************************************
*<LogicalOrExpression> -> <LogicalAndExpression><BinaryExpressionE>                  *
*<BinaryExpressionE> -> || <LogicalAndExpression><BinaryExpressionE> | e             *
*																					 *
*<LogicalAndExpression> -> <InclusiveOrExpression><LogicalAndExpressionE>            *
*<LogicalAndExpressionE> -> && <InclusiveOrExpression><LogicalAndExpressionE> | e    *
*																					 *
*<InclusiveOrExpression> -> <ExclusiveOrExpression><InclusiveOrExpressionE>          *
*<InclusiveOrExpressionE> -> | <ExclusiveOrExpression><InclusiveOrExpressionE> | e   *
*																					 *
*																					 *
*<ExclusiveOrExpression> -> <AndExpression><ExclusiveOrExpressionE>                  *
*<ExclusiveOrExpressionE> ->  ^ <AndExpression><ExclusiveOrExpressionE> | e          *
*																					 *
*																					 *
*<AndExpression> -> <EqualityExpression><AndExpressionE>                             *
*<AndExpressionE> -> & <EqualityExpression><AndExpressionE> | e                      *
*																					 *
*																					 *
*<EqualityExpression> -> <RelationalExpression><EqualityExpressionE>                 *
*<EqualityExpressionE> -> == <RelationalExpression><EqualityExpressionE> |           *
*                        != <RelationalExpression><EqualityExpressionE> |            *
*						e                                                            *
*																					 *
*<RelationalExpression> -> <ShiftExpression><RelationalExpressionE>                  *
*<RelationalExpressionE> -> < <ShiftExpression><RelationalExpressionE> |             *
*                           > <ShiftExpression><RelationalExpressionE> |             *
*						   <= <ShiftExpression><RelationalExpressionE> |             *
*						   >= <ShiftExpression><RelationalExpressionE> |             *
*						   e                                                         *
*																					 *
*<ShiftExpression> -> <AdditiveExpression><ShiftExpressionE>                         *
*<ShiftExpressionE> -> << <AdditiveExpression><ShiftExpressionE> |                   *
*                      >> <AdditiveExpression><ShiftExpressionE> |                   *
*					  e                                                              *
*																					 *
*<AdditiveExpression> -> <MultiplicativeExpression><AdditiveExpressionE>             *
*<AdditiveExpressionE> ->  + <MultiplicativeExpression><AdditiveExpressionE>|        *
*                          - <MultiplicativeExpression><AdditiveExpressionE>|        *
*						  e                                                          *
*																					 *
*<MultiplicativeExpression> -> <NotExpression><MultiplicativeExpressionE>            *
*<MultiplicativeExpressionE> -> * <NotExpression><MultiplicativeExpressionE> |       *
*                               / <NotExpression><MultiplicativeExpressionE> |       *
*							   % <NotExpression><MultiplicativeExpressionE> |        *
*							   e                                                     *
*																					 *
*<NotExpression> -> !<PrimaryExpression>                                             *
*                | <PrimaryExpression>                                               *
*************************************************************************************/																					 *                                     
		