------ TOKENS ------
fn WITH TYPE FN
main WITH TYPE IDENTIFIER
( WITH TYPE LPAR
) WITH TYPE RPAR
{ WITH TYPE LBRACE
let WITH TYPE LET
mut WITH TYPE MUT
var2 WITH TYPE IDENTIFIER
= WITH TYPE SET
10 WITH TYPE NUMBER
; WITH TYPE SEMICOLON
} WITH TYPE RBRACE

------ AST ------
+-Program
	+-FunctionDefinitions
		+-LoopExpression
			+-Identifier (main)
			+-Variable
				+-FunctionDefinition
					+-Statements
						+-Statement
							+-TypeExpression
								+-Variable (var2)
							+-DataType
								+-INTEGER_LITERAL (10)

------ TOKENS ------
fn WITH TYPE FN
main WITH TYPE IDENTIFIER
( WITH TYPE LPAR
) WITH TYPE RPAR
{ WITH TYPE LBRACE
let WITH TYPE LET
mut WITH TYPE MUT
var1 WITH TYPE IDENTIFIER
= WITH TYPE SET
2 WITH TYPE NUMBER
; WITH TYPE SEMICOLON
let WITH TYPE LET
mut WITH TYPE MUT
var2 WITH TYPE IDENTIFIER
= WITH TYPE SET
10 WITH TYPE NUMBER
; WITH TYPE SEMICOLON
if WITH TYPE IF
var2 WITH TYPE IDENTIFIER
< WITH TYPE LESS
var1 WITH TYPE IDENTIFIER
* WITH TYPE STAR
2 WITH TYPE NUMBER
{ WITH TYPE LBRACE
println! WITH TYPE PRINTLN
! WITH TYPE NOT
" WITH TYPE QUOTES
{ WITH TYPE LBRACE
} WITH TYPE RBRACE
" WITH TYPE QUOTES
, WITH TYPE COMMA
var2 WITH TYPE IDENTIFIER
) WITH TYPE RPAR
; WITH TYPE SEMICOLON
} WITH TYPE RBRACE
else WITH TYPE ELSE
{ WITH TYPE LBRACE
let WITH TYPE LET
mut WITH TYPE MUT
temp WITH TYPE IDENTIFIER
= WITH TYPE SET
var2 WITH TYPE IDENTIFIER
; WITH TYPE SEMICOLON
var2 WITH TYPE IDENTIFIER
= WITH TYPE SET
var1 WITH TYPE IDENTIFIER
; WITH TYPE SEMICOLON
var1 WITH TYPE IDENTIFIER
= WITH TYPE SET
temp WITH TYPE IDENTIFIER
; WITH TYPE SEMICOLON
println! WITH TYPE PRINTLN
! WITH TYPE NOT
" WITH TYPE QUOTES
{ WITH TYPE LBRACE
} WITH TYPE RBRACE
" WITH TYPE QUOTES
, WITH TYPE COMMA
var1 WITH TYPE IDENTIFIER
) WITH TYPE RPAR
; WITH TYPE SEMICOLON
println! WITH TYPE PRINTLN
! WITH TYPE NOT
" WITH TYPE QUOTES
{ WITH TYPE LBRACE
} WITH TYPE RBRACE
" WITH TYPE QUOTES
, WITH TYPE COMMA
var2 WITH TYPE IDENTIFIER
) WITH TYPE RPAR
; WITH TYPE SEMICOLON
} WITH TYPE RBRACE
} WITH TYPE RBRACE

------ TOKENS ------
fn WITH TYPE FN
main WITH TYPE IDENTIFIER
( WITH TYPE LPAR
) WITH TYPE RPAR
{ WITH TYPE LBRACE
if WITH TYPE IF
var2 WITH TYPE IDENTIFIER
< WITH TYPE LESS
var1 WITH TYPE IDENTIFIER
* WITH TYPE STAR
2 WITH TYPE NUMBER
} WITH TYPE RBRACE

------ TOKENS ------
fn WITH TYPE FN
main WITH TYPE IDENTIFIER
( WITH TYPE LPAR
) WITH TYPE RPAR
{ WITH TYPE LBRACE
if WITH TYPE IF
var2 WITH TYPE IDENTIFIER
< WITH TYPE LESS
var1 WITH TYPE IDENTIFIER
* WITH TYPE STAR
2 WITH TYPE NUMBER
} WITH TYPE RBRACE

------ TOKENS ------
fn WITH TYPE FN
main WITH TYPE IDENTIFIER
( WITH TYPE LPAR
) WITH TYPE RPAR
{ WITH TYPE LBRACE
if WITH TYPE IF
var2 WITH TYPE IDENTIFIER
< WITH TYPE LESS
var1 WITH TYPE IDENTIFIER
* WITH TYPE STAR
2 WITH TYPE NUMBER
} WITH TYPE RBRACE

------ TOKENS ------
fn WITH TYPE FN
main WITH TYPE IDENTIFIER
( WITH TYPE LPAR
) WITH TYPE RPAR
{ WITH TYPE LBRACE
if WITH TYPE IF
var2 WITH TYPE IDENTIFIER
< WITH TYPE LESS
var1 WITH TYPE IDENTIFIER
* WITH TYPE STAR
2 WITH TYPE NUMBER
} WITH TYPE RBRACE

