------ TOKENS ------
fn WITH TYPE FN
main WITH TYPE IDENTIFIER
( WITH TYPE LPAR
) WITH TYPE RPAR
{ WITH TYPE LBRACE
let WITH TYPE LET
a WITH TYPE IDENTIFIER
= WITH TYPE SET
1 WITH TYPE NUMBER
; WITH TYPE SEMICOLON
println! WITH TYPE PRINTLN
( WITH TYPE LPAR
" WITH TYPE QUOTES
aasd WITH TYPE IDENTIFIER
" WITH TYPE QUOTES
) WITH TYPE RPAR
; WITH TYPE SEMICOLON
// WITH TYPE COMMENT
if WITH TYPE IF
a WITH TYPE IDENTIFIER
== WITH TYPE EQUALITY
1 WITH TYPE NUMBER
{ WITH TYPE LBRACE
a WITH TYPE IDENTIFIER
= WITH TYPE SET
2 WITH TYPE NUMBER
; WITH TYPE SEMICOLON
} WITH TYPE RBRACE
} WITH TYPE RBRACE

------ AST ------
+-Program
  +-FunctionDefinitions
    +-FunctionIdentifier
      +-TOKEN (fn)
      +-Identifier (main)
      +-TOKEN (()
      +-BlockExpression
        +-TOKEN ({)
        +-Statements
          +-Statement
            +-DeclarationStatement
              +-TOKEN (let)
              +-VariableDefinition
                +-Variable (a)
              +-TOKEN (=)
              +-DeclarationRightStatement
                +-LogicalOrExpression
                  +-LogicalAndExpression
                    +-InclusiveOrExpression
                      +-ExclusiveOrExpression
                        +-AndExpression
                          +-EqualityExpression
                            +-RelationalExpression
                              +-ShiftExpression
                                +-AdditiveExpression
                                  +-MultiplicativeExpression
                                    +-NotExpression
                                      +-PrimaryExpression
                                        +-LiteralExpression
                                          +-INTEGER_LITERAL (1)
          +-TOKEN (;)
          +-Statement
            +-PRINTLN
              +-TOKEN (println!)
              +-TOKEN (()
              +-TOKEN (")
              +-TOKEN (")
              +-TOKEN ())
          +-TOKEN (;)
          +-IfExpression
            +-TOKEN (if)
            +-ConditionStatement
              +-LogicalOrExpression
                +-LogicalAndExpression
                  +-InclusiveOrExpression
                    +-ExclusiveOrExpression
                      +-AndExpression
                        +-EqualityExpression
                          +-RelationalExpression
                            +-ShiftExpression
                              +-AdditiveExpression
                                +-MultiplicativeExpression
                                  +-NotExpression
                                    +-PrimaryExpression
                                      +-Variable (a)
                          +-EqualityExpressionE
                            +-TOKEN (==)
                            +-RelationalExpression
                              +-ShiftExpression
                                +-AdditiveExpression
                                  +-MultiplicativeExpression
                                    +-NotExpression
                                      +-PrimaryExpression
                                        +-LiteralExpression
                                          +-INTEGER_LITERAL (1)
            +-BlockExpression
              +-TOKEN ({)
              +-Statements
                +-Statement
                  +-AssignmentExpression
                    +-Variable (a)
                    +-AssignmentOperator
                    +-LogicalOrExpression
                      +-LogicalAndExpression
                        +-InclusiveOrExpression
                          +-ExclusiveOrExpression
                            +-AndExpression
                              +-EqualityExpression
                                +-RelationalExpression
                                  +-ShiftExpression
                                    +-AdditiveExpression
                                      +-MultiplicativeExpression
                                        +-NotExpression
                                          +-PrimaryExpression
                                            +-LiteralExpression
                                              +-INTEGER_LITERAL (2)
                +-TOKEN (;)
              +-TOKEN (})
        +-TOKEN (})

