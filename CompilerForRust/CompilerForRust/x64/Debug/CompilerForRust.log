  main.cpp
D:\equip\my\llvm-project\llvm\include\llvm\Support\MathExtras.h(443,31): warning C4146: 一元负运算符应用于无符号类型，结果仍为无符号类型
D:\equip\my\llvm-project\llvm\include\llvm\ADT\APInt.h(1839,20): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\Support\SwapByteOrder.h(115,23): warning C4244: “return”: 从“uint64_t”转换到“unsigned long”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\Support\SwapByteOrder.h(120,23): warning C4244: “return”: 从“uint64_t”转换到“long”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\ADT\DenseMapInfo.h(348,1): warning C4267: “return”: 从“size_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\DerivedTypes.h(455,22): warning C4244: “初始化”: 从“unsigned __int64”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\DerivedTypes.h(486,24): warning C4244: “初始化”: 从“unsigned __int64”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\DerivedTypes.h(611,52): warning C4244: “参数”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\GlobalObject.h(75,12): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Function.h(370,23): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Function.h(474,23): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\InstrTypes.h(1262,25): warning C4244: “return”: 从“__int64”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\InstrTypes.h(1284,14): warning C4244: “return”: 从“__int64”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\InstrTypes.h(1311,48): warning C4244: “return”: 从“__int64”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\InstrTypes.h(1356,14): warning C4244: “return”: 从“__int64”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\InstrTypes.h(1676,23): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\InstrTypes.h(1687,23): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\InstrTypes.h(1860,25): warning C4244: “return”: 从“__int64”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\InstrTypes.h(1888,53): warning C4244: “参数”: 从“__int64”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\InstrTypes.h(2217,1): warning C4267: “+=”: 从“size_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\DataLayout.h(601,39): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\CFG.h(123,23): warning C4244: “return”: 从“__int64”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(128,58): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(219,58): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(351,58): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(1501,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(1510,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(1511,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(1511,1): warning C4267: “初始化”: 从“size_t”转换到“const unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(1524,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(1532,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(1533,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(1533,1): warning C4267: “初始化”: 从“size_t”转换到“const unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(2076,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(2087,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(3270,24): warning C4244: “参数”: 从“ptrdiff_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(91,1): warning C4624: “llvm::detail::trivial_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::SmallVector<unsigned int,8>
          ]
D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::trivial_helper<T>”的引用
          with
          [
              T=llvm::SmallVector<unsigned int,8>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(144): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::trivial_helper<T>>”的引用
          with
          [
              T=llvm::SmallVector<unsigned int,8>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\Optional.h(217): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copyable<T>”的引用
          with
          [
              T=llvm::SmallVector<unsigned int,8>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(3507): message : 查看对正在编译的 类 模板 实例化“llvm::Optional<llvm::SmallVector<unsigned int,8>>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(3744,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(3756,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(3757,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(3767,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(3778,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(3779,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(3963,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(3977,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(3978,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(3990,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(4003,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(4004,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(4406,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(4413,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(4447,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(4454,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\IntrinsicInst.h(566,52): warning C4244: “return”: 从“uint64_t”转换到“uint32_t”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(116,1): warning C4624: “llvm::OverflowingBinaryOperator”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(157,1): warning C4624: “llvm::PossiblyExactOperator”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(408,1): warning C4624: “llvm::FPMathOperator”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(424,1): warning C4624: “llvm::ConcreteOperator<llvm::OverflowingBinaryOperator,13>”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(427): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::OverflowingBinaryOperator,13>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(428,1): warning C4624: “llvm::AddOperator”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(424,1): warning C4624: “llvm::ConcreteOperator<llvm::OverflowingBinaryOperator,15>”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(430): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::OverflowingBinaryOperator,15>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(431,1): warning C4624: “llvm::SubOperator”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(424,1): warning C4624: “llvm::ConcreteOperator<llvm::OverflowingBinaryOperator,17>”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(433): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::OverflowingBinaryOperator,17>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(434,1): warning C4624: “llvm::MulOperator”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(424,1): warning C4624: “llvm::ConcreteOperator<llvm::OverflowingBinaryOperator,25>”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(436): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::OverflowingBinaryOperator,25>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(437,1): warning C4624: “llvm::ShlOperator”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(424,1): warning C4624: “llvm::ConcreteOperator<llvm::PossiblyExactOperator,20>”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(440): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::PossiblyExactOperator,20>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(441,1): warning C4624: “llvm::SDivOperator”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(424,1): warning C4624: “llvm::ConcreteOperator<llvm::PossiblyExactOperator,19>”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(443): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::PossiblyExactOperator,19>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(444,1): warning C4624: “llvm::UDivOperator”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(424,1): warning C4624: “llvm::ConcreteOperator<llvm::PossiblyExactOperator,27>”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(446): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::PossiblyExactOperator,27>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(447,1): warning C4624: “llvm::AShrOperator”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(424,1): warning C4624: “llvm::ConcreteOperator<llvm::PossiblyExactOperator,26>”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(449): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::PossiblyExactOperator,26>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(450,1): warning C4624: “llvm::LShrOperator”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(424,1): warning C4624: “llvm::ConcreteOperator<llvm::Operator,39>”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(452): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::Operator,39>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(452,76): warning C4624: “llvm::ZExtOperator”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(424,1): warning C4624: “llvm::ConcreteOperator<llvm::Operator,34>”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(455): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::Operator,34>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(571,1): warning C4624: “llvm::GEPOperator”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(543,20): warning C4244: “return”: 从“__int64”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(424,1): warning C4624: “llvm::ConcreteOperator<llvm::Operator,47>”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(574): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::Operator,47>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(599,1): warning C4624: “llvm::PtrToIntOperator”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(424,1): warning C4624: “llvm::ConcreteOperator<llvm::Operator,49>”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(602): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::Operator,49>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(614,1): warning C4624: “llvm::BitCastOperator”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(424,1): warning C4624: “llvm::ConcreteOperator<llvm::Operator,50>”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(617): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::Operator,50>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\IR\Operator.h(633,1): warning C4624: “llvm::AddrSpaceCastOperator”: 已将析构函数隐式定义为“已删除”
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(79,1): warning C4624: “llvm::detail::copy_construction_triviality_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::Any
          ]
D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::copy_construction_triviality_helper<T>”的引用
          with
          [
              T=llvm::Any
          ]
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(100): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::copy_construction_triviality_helper<T>>”的引用
          with
          [
              T=llvm::Any
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\FunctionExtras.h(94): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copy_constructible<llvm::Any>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\ADT\FunctionExtras.h(94): message : 查看对正在编译的 别名 模板 实例化“llvm::detail::UniqueFunctionBase<R,llvm::StringRef,llvm::Any>::AdjustedParamT<llvm::Any>”的引用
          with
          [
              R=bool
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\FunctionExtras.h(337): message : 查看对正在编译的 类 模板 实例化“llvm::detail::UniqueFunctionBase<R,llvm::StringRef,llvm::Any>”的引用
          with
          [
              R=bool
          ]
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(75): message : 查看对正在编译的 类 模板 实例化“llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>”的引用
D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::copy_construction_triviality_helper<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(100): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::copy_construction_triviality_helper<T>>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(281): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copy_constructible<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(1027): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVectorImpl<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\IR\PassInstrumentation.h(139): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVector<llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>,4>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(86,1): warning C4624: “llvm::detail::move_construction_triviality_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::Any
          ]
D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(661): message : 查看对正在编译的 类 模板 实例化“llvm::detail::move_construction_triviality_helper<T>”的引用
          with
          [
              T=llvm::Any
          ]
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(111): message : 查看对正在编译的 类 模板 实例化“std::is_move_constructible<llvm::detail::move_construction_triviality_helper<T>>”的引用
          with
          [
              T=llvm::Any
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\FunctionExtras.h(94): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_move_constructible<llvm::Any>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(79,1): warning C4624: “llvm::detail::copy_construction_triviality_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(86,1): warning C4624: “llvm::detail::move_construction_triviality_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>
          ]
D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(661): message : 查看对正在编译的 类 模板 实例化“llvm::detail::move_construction_triviality_helper<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(111): message : 查看对正在编译的 类 模板 实例化“std::is_move_constructible<llvm::detail::move_construction_triviality_helper<T>>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(282): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_move_constructible<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(79,1): warning C4624: “llvm::detail::copy_construction_triviality_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforeSkippedPassFunc>
          ]
D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::copy_construction_triviality_helper<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforeSkippedPassFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(100): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::copy_construction_triviality_helper<T>>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforeSkippedPassFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(281): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copy_constructible<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforeSkippedPassFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(1027): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVectorImpl<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforeSkippedPassFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\IR\PassInstrumentation.h(142): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVector<llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforeSkippedPassFunc>,4>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(86,1): warning C4624: “llvm::detail::move_construction_triviality_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforeSkippedPassFunc>
          ]
D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(661): message : 查看对正在编译的 类 模板 实例化“llvm::detail::move_construction_triviality_helper<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforeSkippedPassFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(111): message : 查看对正在编译的 类 模板 实例化“std::is_move_constructible<llvm::detail::move_construction_triviality_helper<T>>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforeSkippedPassFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(282): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_move_constructible<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforeSkippedPassFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(79,1): warning C4624: “llvm::detail::copy_construction_triviality_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassFunc>
          ]
D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::copy_construction_triviality_helper<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(100): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::copy_construction_triviality_helper<T>>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(281): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copy_constructible<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(1027): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVectorImpl<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\IR\PassInstrumentation.h(147): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVector<llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassFunc>,4>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(86,1): warning C4624: “llvm::detail::move_construction_triviality_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassFunc>
          ]
D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(661): message : 查看对正在编译的 类 模板 实例化“llvm::detail::move_construction_triviality_helper<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(111): message : 查看对正在编译的 类 模板 实例化“std::is_move_constructible<llvm::detail::move_construction_triviality_helper<T>>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(282): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_move_constructible<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(79,1): warning C4624: “llvm::detail::copy_construction_triviality_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassInvalidatedFunc>
          ]
D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::copy_construction_triviality_helper<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassInvalidatedFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(100): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::copy_construction_triviality_helper<T>>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassInvalidatedFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(281): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copy_constructible<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassInvalidatedFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(1027): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVectorImpl<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassInvalidatedFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\IR\PassInstrumentation.h(150): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVector<llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassInvalidatedFunc>,4>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(86,1): warning C4624: “llvm::detail::move_construction_triviality_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassInvalidatedFunc>
          ]
D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(661): message : 查看对正在编译的 类 模板 实例化“llvm::detail::move_construction_triviality_helper<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassInvalidatedFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(111): message : 查看对正在编译的 类 模板 实例化“std::is_move_constructible<llvm::detail::move_construction_triviality_helper<T>>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassInvalidatedFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(282): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_move_constructible<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassInvalidatedFunc>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\BitVector.h(356,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\ADT\BitVector.h(409,16): warning C4244: “=”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\ADT\BitVector.h(448,16): warning C4244: “=”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\ADT\StringExtras.h(74,1): warning C4146: 一元负运算符应用于无符号类型，结果仍为无符号类型
D:\equip\my\llvm-project\llvm\include\llvm\ADT\StringExtras.h(91,64): warning C4146: 一元负运算符应用于无符号类型，结果仍为无符号类型
D:\equip\my\llvm-project\llvm\include\llvm\ADT\StringExtras.h(187,6): warning C4146: 一元负运算符应用于无符号类型，结果仍为无符号类型
D:\equip\my\llvm-project\llvm\include\llvm\ADT\StringExtras.h(187,29): warning C4146: 一元负运算符应用于无符号类型，结果仍为无符号类型
D:\equip\my\llvm-project\llvm\include\llvm\ADT\StringExtras.h(294,44): warning C4146: 一元负运算符应用于无符号类型，结果仍为无符号类型
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(79,1): warning C4624: “llvm::detail::copy_construction_triviality_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::string
          ]
D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::copy_construction_triviality_helper<T>”的引用
          with
          [
              T=std::string
          ]
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(100): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::copy_construction_triviality_helper<T>>”的引用
          with
          [
              T=std::string
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(281): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copy_constructible<T>”的引用
          with
          [
              T=std::string
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(1027): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVectorImpl<T>”的引用
          with
          [
              T=std::string
          ]
D:\equip\my\llvm-project\llvm\include\llvm\Support\Error.h(991): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVector<std::string,2>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(86,1): warning C4624: “llvm::detail::move_construction_triviality_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::string
          ]
D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(661): message : 查看对正在编译的 类 模板 实例化“llvm::detail::move_construction_triviality_helper<T>”的引用
          with
          [
              T=std::string
          ]
D:\equip\my\llvm-project\llvm\include\llvm\Support\type_traits.h(111): message : 查看对正在编译的 类 模板 实例化“std::is_move_constructible<llvm::detail::move_construction_triviality_helper<T>>”的引用
          with
          [
              T=std::string
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(282): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_move_constructible<T>”的引用
          with
          [
              T=std::string
          ]
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(3228,64): warning C4244: “参数”: 从“ptrdiff_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(3225): message : 在编译 类 模板 成员函数“ConstantIntT *llvm::SwitchInst::CaseHandleImpl<const llvm::SwitchInst,ConstantIntT,const llvm::BasicBlock>::getCaseValue(void) const”时
          with
          [
              ConstantIntT=const llvm::ConstantInt
          ]
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(3441): message : 查看对正在编译的函数 模板 实例化“ConstantIntT *llvm::SwitchInst::CaseHandleImpl<const llvm::SwitchInst,ConstantIntT,const llvm::BasicBlock>::getCaseValue(void) const”的引用
          with
          [
              ConstantIntT=const llvm::ConstantInt
          ]
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(3284): message : 查看对正在编译的 类 模板 实例化“llvm::SwitchInst::CaseHandleImpl<const llvm::SwitchInst,const llvm::ConstantInt,const llvm::BasicBlock>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(3501): message : 查看对正在编译的 类 模板 实例化“llvm::SwitchInst::CaseIteratorImpl<llvm::SwitchInst::ConstCaseHandle>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(3247,30): warning C4244: “return”: 从“ptrdiff_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(3243): message : 在编译 类 模板 成员函数“unsigned int llvm::SwitchInst::CaseHandleImpl<llvm::SwitchInst,llvm::ConstantInt,llvm::BasicBlock>::getSuccessorIndex(void) const”时
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(3275): message : 查看对正在编译的函数 模板 实例化“unsigned int llvm::SwitchInst::CaseHandleImpl<llvm::SwitchInst,llvm::ConstantInt,llvm::BasicBlock>::getSuccessorIndex(void) const”的引用
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(3260): message : 查看对正在编译的 类 模板 实例化“llvm::SwitchInst::CaseHandleImpl<llvm::SwitchInst,llvm::ConstantInt,llvm::BasicBlock>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(88,1): warning C4267: “=”: 从“size_t”转换到“Size_T”，可能丢失数据
          with
          [
              Size_T=unsigned int
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(86): message : 在编译 类 模板 成员函数“void llvm::SmallVectorBase<unsigned int>::set_size(size_t)”时
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(329): message : 查看对正在编译的函数 模板 实例化“void llvm::SmallVectorBase<unsigned int>::set_size(size_t)”的引用
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(109): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVectorBase<unsigned int>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(377): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVectorTemplateCommon<T,void>”的引用
          with
          [
              T=llvm::Metadata *
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(434): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVectorTemplateBase<T,true>”的引用
          with
          [
              T=llvm::Metadata *
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(1027): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVectorImpl<T>”的引用
          with
          [
              T=llvm::Metadata *
          ]
D:\equip\my\llvm-project\llvm\include\llvm\IR\Metadata.h(1132): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVector<llvm::Metadata *,4>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\ADT\DenseMap.h(391,24): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
D:\equip\my\llvm-project\llvm\include\llvm\ADT\DenseMap.h(385): message : 在编译 类 模板 成员函数“unsigned int llvm::DenseMapBase<llvm::DenseMap<const llvm::MDNode *,bool,llvm::DenseMapInfo<KeyT>,llvm::detail::DenseMapPair<KeyT,ValueT>>,KeyT,ValueT,KeyInfoT,BucketT>::getMinBucketToReserveForEntries(unsigned int)”时
          with
          [
              KeyT=const llvm::MDNode *,
              ValueT=bool,
              KeyInfoT=llvm::DenseMapInfo<const llvm::MDNode *>,
              BucketT=llvm::detail::DenseMapPair<const llvm::MDNode *,bool>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\DenseMap.h(792): message : 查看对正在编译的函数 模板 实例化“unsigned int llvm::DenseMapBase<llvm::DenseMap<const llvm::MDNode *,bool,llvm::DenseMapInfo<KeyT>,llvm::detail::DenseMapPair<KeyT,ValueT>>,KeyT,ValueT,KeyInfoT,BucketT>::getMinBucketToReserveForEntries(unsigned int)”的引用
          with
          [
              KeyT=const llvm::MDNode *,
              ValueT=bool,
              KeyInfoT=llvm::DenseMapInfo<const llvm::MDNode *>,
              BucketT=llvm::detail::DenseMapPair<const llvm::MDNode *,bool>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\DenseMap.h(714): message : 查看对正在编译的 类 模板 实例化“llvm::DenseMapBase<llvm::DenseMap<const llvm::MDNode *,bool,llvm::DenseMapInfo<KeyT>,llvm::detail::DenseMapPair<KeyT,ValueT>>,KeyT,ValueT,KeyInfoT,BucketT>”的引用
          with
          [
              KeyT=const llvm::MDNode *,
              ValueT=bool,
              KeyInfoT=llvm::DenseMapInfo<const llvm::MDNode *>,
              BucketT=llvm::detail::DenseMapPair<const llvm::MDNode *,bool>
          ]
D:\equip\my\llvm-project\llvm\include\llvm\IR\Verifier.h(58): message : 查看对正在编译的 类 模板 实例化“llvm::DenseMap<const llvm::MDNode *,bool,llvm::DenseMapInfo<KeyT>,llvm::detail::DenseMapPair<KeyT,ValueT>>”的引用
          with
          [
              KeyT=const llvm::MDNode *,
              ValueT=bool
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(57,1): warning C4267: “初始化”: 从“size_t”转换到“Size_T”，可能丢失数据
          with
          [
              Size_T=unsigned int
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(56): message : 在编译 类 模板 成员函数“llvm::SmallVectorBase<unsigned int>::SmallVectorBase(void *,size_t)”时
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(123): message : 查看对正在编译的函数 模板 实例化“llvm::SmallVectorBase<unsigned int>::SmallVectorBase(void *,size_t)”的引用
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(369,1): warning C4267: “=”: 从“size_t”转换到“Size_T”，可能丢失数据
          with
          [
              Size_T=unsigned int
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(340): message : 在编译 类 模板 成员函数“void llvm::SmallVectorTemplateBase<T,false>::grow(size_t)”时
          with
          [
              T=std::string
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(327): message : 查看对正在编译的函数 模板 实例化“void llvm::SmallVectorTemplateBase<T,false>::grow(size_t)”的引用
          with
          [
              T=std::string
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(434): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVectorTemplateBase<T,false>”的引用
          with
          [
              T=std::string
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\SmallVector.h(1027): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVectorImpl<T>”的引用
          with
          [
              T=std::string
          ]
D:\equip\my\llvm-project\llvm\include\llvm\Support\Error.h(991): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVector<std::string,2>”的引用
D:\equip\my\llvm-project\llvm\include\llvm\ADT\Bitfields.h(180,22): warning C4244: “参数”: 从“const StorageType”转换到“T”，可能丢失数据
          with
          [
              StorageType=unsigned short
          ]
          and
          [
              T=unsigned char
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\Bitfields.h(178): message : 在编译 类 模板 成员函数“unsigned char llvm::bitfields_details::Impl<Bitfield,StorageType>::extract(StorageType)”时
          with
          [
              Bitfield=llvm::AtomicCmpXchgInst::WeakField,
              StorageType=unsigned short
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\Bitfields.h(256): message : 查看对正在编译的函数 模板 实例化“unsigned char llvm::bitfields_details::Impl<Bitfield,StorageType>::extract(StorageType)”的引用
          with
          [
              Bitfield=llvm::AtomicCmpXchgInst::WeakField,
              StorageType=unsigned short
          ]
D:\equip\my\llvm-project\llvm\include\llvm\ADT\Bitfields.h(256): message : 查看对正在编译的 类 模板 实例化“llvm::bitfields_details::Impl<Bitfield,StorageType>”的引用
          with
          [
              Bitfield=llvm::AtomicCmpXchgInst::WeakField,
              StorageType=unsigned short
          ]
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instruction.h(815): message : 查看对正在编译的函数 模板 实例化“bool llvm::Bitfield::get<BitfieldElement,unsigned short>(StorageType)”的引用
          with
          [
              BitfieldElement=llvm::AtomicCmpXchgInst::WeakField,
              StorageType=unsigned short
          ]
D:\equip\my\llvm-project\llvm\include\llvm\IR\Instructions.h(586): message : 查看对正在编译的函数 模板 实例化“bool llvm::Instruction::getSubclassData<llvm::AtomicCmpXchgInst::WeakField>(void) const”的引用
  CompilerForRust.vcxproj -> E:\compiler\rust_compiler\CompilerForRust\x64\Debug\CompilerForRust.exe
