  Parser.cpp
E:\compiler\llvm-9.0.0.src\include\llvm\Support\MathExtras.h(379,31): warning C4146: 一元负运算符应用于无符号类型，结果仍为无符号类型
E:\compiler\llvm-9.0.0.src\include\llvm\ADT\APInt.h(1723,31): warning C4244: “参数”: 从“uint64_t”转换到“uint32_t”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\ADT\APInt.h(1770,20): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\ADT\SmallVector.h(44,18): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\ADT\SmallVector.h(68,1): warning C4267: “=”: 从“size_t”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\ADT\DenseMapInfo.h(268,1): warning C4267: “return”: 从“size_t”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\User.h(48,32): warning C4141: “inline”: 使用了多次
E:\compiler\llvm-9.0.0.src\include\llvm\IR\DerivedTypes.h(526,29): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\DerivedTypes.h(536,48): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\InstrTypes.h(978,48): warning C4244: “参数”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\InstrTypes.h(1180,25): warning C4244: “return”: 从“__int64”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\InstrTypes.h(1202,14): warning C4244: “return”: 从“__int64”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\InstrTypes.h(1229,48): warning C4244: “return”: 从“__int64”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\InstrTypes.h(1729,25): warning C4244: “return”: 从“__int64”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\InstrTypes.h(1757,53): warning C4244: “参数”: 从“__int64”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\Support\type_traits.h(97,1): warning C4624: “llvm::detail::trivial_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::OperandBundleDef
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::trivial_helper<T>”的引用
          with
          [
              T=llvm::OperandBundleDef
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\Support\type_traits.h(150): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::trivial_helper<T>>”的引用
          with
          [
              T=llvm::OperandBundleDef
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\ADT\SmallVector.h(315): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copyable<T>”的引用
          with
          [
              T=llvm::OperandBundleDef
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\IR\InstrTypes.h(1845): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVectorImpl<llvm::OperandBundleDef>”的引用
E:\compiler\llvm-9.0.0.src\include\llvm\IR\InstrTypes.h(2091,1): warning C4267: “+=”: 从“size_t”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(1445,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(1454,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(1455,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(1455,1): warning C4267: “初始化”: 从“size_t”转换到“const unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(1458,1): warning C4291: “void *llvm::User::operator new(size_t,unsigned int,unsigned int)”: 未找到匹配的删除运算符；如果初始化引发异常，则不会释放内存
E:\compiler\llvm-9.0.0.src\include\llvm\IR\User.h(71): message : 参见“llvm::User::operator new”的声明
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(1468,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(1476,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(1477,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(1477,1): warning C4267: “初始化”: 从“size_t”转换到“const unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(1480,1): warning C4291: “void *llvm::User::operator new(size_t,unsigned int,unsigned int)”: 未找到匹配的删除运算符；如果初始化引发异常，则不会释放内存
E:\compiler\llvm-9.0.0.src\include\llvm\IR\User.h(71): message : 参见“llvm::User::operator new”的声明
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(3220,24): warning C4244: “参数”: 从“ptrdiff_t”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\Support\type_traits.h(97,1): warning C4624: “llvm::detail::trivial_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::SmallVector<unsigned int,8>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::trivial_helper<T>”的引用
          with
          [
              T=llvm::SmallVector<unsigned int,8>
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\Support\type_traits.h(150): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::trivial_helper<T>>”的引用
          with
          [
              T=llvm::SmallVector<unsigned int,8>
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\ADT\Optional.h(216): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copyable<T>”的引用
          with
          [
              T=llvm::SmallVector<unsigned int,8>
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(3457): message : 查看对正在编译的 类 模板 实例化“llvm::Optional<llvm::SmallVector<unsigned int,8>>”的引用
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(3703,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(3715,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(3716,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(3720,1): warning C4291: “void *llvm::User::operator new(size_t,unsigned int,unsigned int)”: 未找到匹配的删除运算符；如果初始化引发异常，则不会释放内存
E:\compiler\llvm-9.0.0.src\include\llvm\IR\User.h(71): message : 参见“llvm::User::operator new”的声明
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(3726,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(3737,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(3738,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(3742,1): warning C4291: “void *llvm::User::operator new(size_t,unsigned int,unsigned int)”: 未找到匹配的删除运算符；如果初始化引发异常，则不会释放内存
E:\compiler\llvm-9.0.0.src\include\llvm\IR\User.h(71): message : 参见“llvm::User::operator new”的声明
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(3964,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(3978,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(3979,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(3983,1): warning C4291: “void *llvm::User::operator new(size_t,unsigned int,unsigned int)”: 未找到匹配的删除运算符；如果初始化引发异常，则不会释放内存
E:\compiler\llvm-9.0.0.src\include\llvm\IR\User.h(71): message : 参见“llvm::User::operator new”的声明
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(3991,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(4004,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(4005,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(4009,1): warning C4291: “void *llvm::User::operator new(size_t,unsigned int,unsigned int)”: 未找到匹配的删除运算符；如果初始化引发异常，则不会释放内存
E:\compiler\llvm-9.0.0.src\include\llvm\IR\User.h(71): message : 参见“llvm::User::operator new”的声明
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(4409,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(4416,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(4450,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(4457,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\IntrinsicInst.h(503,54): warning C4244: “return”: 从“uint64_t”转换到“uint32_t”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(115,1): warning C4624: “llvm::OverflowingBinaryOperator”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(156,1): warning C4624: “llvm::PossiblyExactOperator”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(394,1): warning C4624: “llvm::FPMathOperator”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(410,1): warning C4624: “llvm::ConcreteOperator<llvm::OverflowingBinaryOperator,13>”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(413): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::OverflowingBinaryOperator,13>”的引用
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(414,1): warning C4624: “llvm::AddOperator”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(410,1): warning C4624: “llvm::ConcreteOperator<llvm::OverflowingBinaryOperator,15>”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(416): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::OverflowingBinaryOperator,15>”的引用
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(417,1): warning C4624: “llvm::SubOperator”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(410,1): warning C4624: “llvm::ConcreteOperator<llvm::OverflowingBinaryOperator,17>”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(419): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::OverflowingBinaryOperator,17>”的引用
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(420,1): warning C4624: “llvm::MulOperator”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(410,1): warning C4624: “llvm::ConcreteOperator<llvm::OverflowingBinaryOperator,25>”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(422): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::OverflowingBinaryOperator,25>”的引用
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(423,1): warning C4624: “llvm::ShlOperator”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(410,1): warning C4624: “llvm::ConcreteOperator<llvm::PossiblyExactOperator,20>”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(426): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::PossiblyExactOperator,20>”的引用
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(427,1): warning C4624: “llvm::SDivOperator”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(410,1): warning C4624: “llvm::ConcreteOperator<llvm::PossiblyExactOperator,19>”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(429): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::PossiblyExactOperator,19>”的引用
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(430,1): warning C4624: “llvm::UDivOperator”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(410,1): warning C4624: “llvm::ConcreteOperator<llvm::PossiblyExactOperator,27>”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(432): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::PossiblyExactOperator,27>”的引用
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(433,1): warning C4624: “llvm::AShrOperator”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(410,1): warning C4624: “llvm::ConcreteOperator<llvm::PossiblyExactOperator,26>”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(435): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::PossiblyExactOperator,26>”的引用
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(436,1): warning C4624: “llvm::LShrOperator”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(410,1): warning C4624: “llvm::ConcreteOperator<llvm::Operator,39>”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(438): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::Operator,39>”的引用
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(438,76): warning C4624: “llvm::ZExtOperator”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(410,1): warning C4624: “llvm::ConcreteOperator<llvm::Operator,34>”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(441): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::Operator,34>”的引用
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(543,1): warning C4624: “llvm::GEPOperator”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(529,20): warning C4244: “return”: 从“std::_Iterator_traits_pointer_base<_Ty,true>::difference_type”转换到“unsigned int”，可能丢失数据
          with
          [
              _Ty=const llvm::Use
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(410,1): warning C4624: “llvm::ConcreteOperator<llvm::Operator,47>”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(546): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::Operator,47>”的引用
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(571,1): warning C4624: “llvm::PtrToIntOperator”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(410,1): warning C4624: “llvm::ConcreteOperator<llvm::Operator,49>”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(574): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::Operator,49>”的引用
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Operator.h(586,1): warning C4624: “llvm::BitCastOperator”: 已将析构函数隐式定义为“已删除”
E:\compiler\llvm-9.0.0.src\include\llvm\Support\type_traits.h(85,1): warning C4624: “llvm::detail::copy_construction_triviality_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::Any
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::copy_construction_triviality_helper<T>”的引用
          with
          [
              T=llvm::Any
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\Support\type_traits.h(106): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::copy_construction_triviality_helper<T>>”的引用
          with
          [
              T=llvm::Any
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\ADT\FunctionExtras.h(75): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copy_constructible<llvm::Any>”的引用
E:\compiler\llvm-9.0.0.src\include\llvm\ADT\FunctionExtras.h(75): message : 查看对正在编译的 别名 模板 实例化“llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>::AdjustedParamT<llvm::Any>”的引用
E:\compiler\llvm-9.0.0.src\include\llvm\Support\type_traits.h(96): message : 查看对正在编译的 类 模板 实例化“llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>”的引用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::trivial_helper<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\Support\type_traits.h(150): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::trivial_helper<T>>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\ADT\SmallVector.h(315): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copyable<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\ADT\SmallVector.h(837): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVectorImpl<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\IR\PassInstrumentation.h(117): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVector<llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>,4>”的引用
E:\compiler\llvm-9.0.0.src\include\llvm\Support\type_traits.h(92,1): warning C4624: “llvm::detail::move_construction_triviality_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::Any
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(661): message : 查看对正在编译的 类 模板 实例化“llvm::detail::move_construction_triviality_helper<T>”的引用
          with
          [
              T=llvm::Any
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\Support\type_traits.h(117): message : 查看对正在编译的 类 模板 实例化“std::is_move_constructible<llvm::detail::move_construction_triviality_helper<T>>”的引用
          with
          [
              T=llvm::Any
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\ADT\FunctionExtras.h(75): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_move_constructible<llvm::Any>”的引用
E:\compiler\llvm-9.0.0.src\include\llvm\Support\type_traits.h(97,1): warning C4624: “llvm::detail::trivial_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\Support\type_traits.h(97,1): warning C4624: “llvm::detail::trivial_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassFunc>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::trivial_helper<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassFunc>
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\Support\type_traits.h(150): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::trivial_helper<T>>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassFunc>
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\ADT\SmallVector.h(315): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copyable<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassFunc>
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\ADT\SmallVector.h(837): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVectorImpl<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassFunc>
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\IR\PassInstrumentation.h(118): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVector<llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassFunc>,4>”的引用
E:\compiler\llvm-9.0.0.src\include\llvm\Support\type_traits.h(97,1): warning C4624: “llvm::detail::trivial_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassInvalidatedFunc>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::trivial_helper<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassInvalidatedFunc>
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\Support\type_traits.h(150): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::trivial_helper<T>>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassInvalidatedFunc>
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\ADT\SmallVector.h(315): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copyable<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassInvalidatedFunc>
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\ADT\SmallVector.h(837): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVectorImpl<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassInvalidatedFunc>
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\IR\PassInstrumentation.h(120): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVector<llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassInvalidatedFunc>,4>”的引用
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(3178,64): warning C4244: “参数”: 从“ptrdiff_t”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(3175): message : 在编译 类 模板 成员函数“ConstantIntT *llvm::SwitchInst::CaseHandleImpl<const llvm::SwitchInst,ConstantIntT,const llvm::BasicBlock>::getCaseValue(void) const”时
          with
          [
              ConstantIntT=const llvm::ConstantInt
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(3391): message : 查看对正在编译的函数 模板 实例化“ConstantIntT *llvm::SwitchInst::CaseHandleImpl<const llvm::SwitchInst,ConstantIntT,const llvm::BasicBlock>::getCaseValue(void) const”的引用
          with
          [
              ConstantIntT=const llvm::ConstantInt
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(3234): message : 查看对正在编译的 类 模板 实例化“llvm::SwitchInst::CaseHandleImpl<const llvm::SwitchInst,const llvm::ConstantInt,const llvm::BasicBlock>”的引用
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(3451): message : 查看对正在编译的 类 模板 实例化“llvm::SwitchInst::CaseIteratorImpl<llvm::SwitchInst::ConstCaseHandle>”的引用
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(3197,30): warning C4244: “return”: 从“ptrdiff_t”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(3193): message : 在编译 类 模板 成员函数“unsigned int llvm::SwitchInst::CaseHandleImpl<llvm::SwitchInst,llvm::ConstantInt,llvm::BasicBlock>::getSuccessorIndex(void) const”时
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(3225): message : 查看对正在编译的函数 模板 实例化“unsigned int llvm::SwitchInst::CaseHandleImpl<llvm::SwitchInst,llvm::ConstantInt,llvm::BasicBlock>::getSuccessorIndex(void) const”的引用
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Instructions.h(3210): message : 查看对正在编译的 类 模板 实例化“llvm::SwitchInst::CaseHandleImpl<llvm::SwitchInst,llvm::ConstantInt,llvm::BasicBlock>”的引用
E:\compiler\llvm-9.0.0.src\include\llvm\ADT\DenseMap.h(388,24): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\ADT\DenseMap.h(382): message : 在编译 类 模板 成员函数“unsigned int llvm::DenseMapBase<llvm::DenseMap<const llvm::MDNode *,bool,llvm::DenseMapInfo<KeyT>,llvm::detail::DenseMapPair<KeyT,ValueT>>,KeyT,ValueT,KeyInfoT,BucketT>::getMinBucketToReserveForEntries(unsigned int)”时
          with
          [
              KeyT=const llvm::MDNode *,
              ValueT=bool,
              KeyInfoT=llvm::DenseMapInfo<const llvm::MDNode *>,
              BucketT=llvm::detail::DenseMapPair<const llvm::MDNode *,bool>
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\ADT\DenseMap.h(789): message : 查看对正在编译的函数 模板 实例化“unsigned int llvm::DenseMapBase<llvm::DenseMap<const llvm::MDNode *,bool,llvm::DenseMapInfo<KeyT>,llvm::detail::DenseMapPair<KeyT,ValueT>>,KeyT,ValueT,KeyInfoT,BucketT>::getMinBucketToReserveForEntries(unsigned int)”的引用
          with
          [
              KeyT=const llvm::MDNode *,
              ValueT=bool,
              KeyInfoT=llvm::DenseMapInfo<const llvm::MDNode *>,
              BucketT=llvm::detail::DenseMapPair<const llvm::MDNode *,bool>
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\ADT\DenseMap.h(711): message : 查看对正在编译的 类 模板 实例化“llvm::DenseMapBase<llvm::DenseMap<const llvm::MDNode *,bool,llvm::DenseMapInfo<KeyT>,llvm::detail::DenseMapPair<KeyT,ValueT>>,KeyT,ValueT,KeyInfoT,BucketT>”的引用
          with
          [
              KeyT=const llvm::MDNode *,
              ValueT=bool,
              KeyInfoT=llvm::DenseMapInfo<const llvm::MDNode *>,
              BucketT=llvm::detail::DenseMapPair<const llvm::MDNode *,bool>
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\IR\Verifier.h(58): message : 查看对正在编译的 类 模板 实例化“llvm::DenseMap<const llvm::MDNode *,bool,llvm::DenseMapInfo<KeyT>,llvm::detail::DenseMapPair<KeyT,ValueT>>”的引用
          with
          [
              KeyT=const llvm::MDNode *,
              ValueT=bool
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\ADT\SmallVector.h(253,1): warning C4267: “=”: 从“size_t”转换到“unsigned int”，可能丢失数据
E:\compiler\llvm-9.0.0.src\include\llvm\ADT\SmallVector.h(233): message : 在编译 类 模板 成员函数“void llvm::SmallVectorTemplateBase<T,false>::grow(size_t)”时
          with
          [
              T=llvm::OperandBundleDef
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\ADT\SmallVector.h(643): message : 查看对正在编译的函数 模板 实例化“void llvm::SmallVectorTemplateBase<T,false>::grow(size_t)”的引用
          with
          [
              T=llvm::OperandBundleDef
          ]
E:\compiler\llvm-9.0.0.src\include\llvm\IR\InstrTypes.h(1845): message : 查看对正在编译的函数 模板 实例化“llvm::OperandBundleDefT<llvm::Value *> &llvm::SmallVectorImpl<llvm::OperandBundleDef>::emplace_back<llvm::OperandBundleUse>(llvm::OperandBundleUse &&)”的引用
E:\compiler\llvm-9.0.0.src\include\llvm\IR\InstrTypes.h(1845): message : 查看对正在编译的函数 模板 实例化“llvm::OperandBundleDefT<llvm::Value *> &llvm::SmallVectorImpl<llvm::OperandBundleDef>::emplace_back<llvm::OperandBundleUse>(llvm::OperandBundleUse &&)”的引用
  CompilerForRust.vcxproj -> E:\compiler\release\x64\Debug\CompilerForRust.exe
